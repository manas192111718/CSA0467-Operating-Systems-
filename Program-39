#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100

// Function to sort an array of integers in ascending order
void sortRequests(int requests[], int numRequests) {
    for (int i = 0; i < numRequests - 1; ++i) {
        for (int j = 0; j < numRequests - i - 1; ++j) {
            if (requests[j] > requests[j + 1]) {
                // Swap requests[j] and requests[j+1]
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }
}

// Function to simulate the C-SCAN disk scheduling algorithm
void cscanDisk(int requests[], int numRequests, int start) {
    int currentPosition = start;
    int totalSeekTime = 0;

    sortRequests(requests, numRequests);

    printf("C-SCAN Disk Scheduling Simulation\n\n");

    // Move the disk arm to the end of the disk
    printf("Moving to the end of the disk (cylinder %d)\n", MAX_REQUESTS - 1);
    totalSeekTime += abs(currentPosition - (MAX_REQUESTS - 1));
    currentPosition = MAX_REQUESTS - 1;

    // Process requests in one direction until reaching the end
    for (int i = 0; i < numRequests; ++i) {
        int currentRequest = requests[i];

        printf("Servicing Request at Cylinder %d\n", currentRequest);
        totalSeekTime += abs(currentPosition - currentRequest);
        currentPosition = currentRequest;
    }

    // Move the disk arm to the beginning of the disk
    printf("Moving to the beginning of the disk (cylinder 0)\n");
    totalSeekTime += abs(currentPosition - 0);
    currentPosition = 0;

    // Process remaining requests in the same direction
    for (int i = 0; i < numRequests; ++i) {
        int currentRequest = requests[i];

        printf("Servicing Request at Cylinder %d\n", currentRequest);
        totalSeekTime += abs(currentPosition - currentRequest);
        currentPosition = currentRequest;
    }

    printf("\nTotal Seek Time: %d\n", totalSeekTime);
}

int main() {
    int requests[MAX_REQUESTS];
    int numRequests, startCylinder;

    printf("Enter the number of requests: ");
    scanf("%d", &numRequests);

    if (numRequests <= 0 || numRequests > MAX_REQUESTS) {
        printf("Invalid number of requests. Exiting...\n");
        return 1;
    }

    printf("Enter the start cylinder: ");
    scanf("%d", &startCylinder);

    printf("Enter the cylinder numbers of requests:\n");
    for (int i = 0; i < numRequests; ++i) {
        printf("Request %d: ", i + 1);
        scanf("%d", &requests[i]);
    }

    cscanDisk(requests, numRequests, startCylinder);

    return 0;
}
